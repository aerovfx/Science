#!/usr/bin/env python3
"""
üìö PDF/Image Scanner with OCR + Math to LaTeX (MacBook Pro M2 Optimized, HEIC supported)
- Qu√©t to√†n b·ªô th∆∞ m·ª•c v√† th∆∞ m·ª•c con ƒë·ªÉ t√¨m file PDF & ·∫£nh (JPG, PNG, HEIC, ...)
- N·∫øu PDF c√≥ text layer ‚Üí tr√≠ch xu·∫•t tr·ª±c ti·∫øp
- N·∫øu kh√¥ng c√≥ text layer ho·∫∑c ·∫£nh ‚Üí OCR b·∫±ng Tesseract
- C√¥ng th·ª©c to√°n h·ªçc ƒë∆∞·ª£c ph√°t hi·ªán v√† b·ªçc l·∫°i th√†nh LaTeX: $$ ... $$
- L∆∞u file .txt c√πng t√™n v√† c√πng th∆∞ m·ª•c v·ªõi file g·ªëc
- Hi·ªÉn th·ªã ti·∫øn tr√¨nh, % ho√†n th√†nh, memory usage
"""

import os
import sys
import time
import gc
import psutil
import re
from pathlib import Path
from tqdm import tqdm
import pytesseract
from pdf2image import convert_from_path
from PyPDF2 import PdfReader
from PIL import Image
import pillow_heif  # ƒë·ªÉ ƒë·ªçc file HEIC

# ƒêƒÉng k√Ω HEIF plugin cho Pillow
pillow_heif.register_heif_opener()

# MacBook Pro (M1/M2) th∆∞·ªùng c√†i Poppler qua Homebrew
POPPLER_PATH = "/opt/homebrew/bin"

SUPPORTED_IMG_EXTS = [".png", ".jpg", ".jpeg", ".heic", ".tif", ".tiff", ".bmp"]

class MemoryMonitor:
    """Theo d√µi memory usage"""
    def __init__(self):
        self.process = psutil.Process()

    def check(self):
        mem = self.process.memory_info().rss / 1024 / 1024
        percent = self.process.memory_percent()
        print(f"üíæ Memory: {mem:.1f}MB ({percent:.1f}%)")
        if percent > 80:
            print("‚ö†Ô∏è Memory usage cao, n√™n theo d√µi!")

def detect_math_expressions(text: str) -> str:
    """
    Ph√°t hi·ªán c√¥ng th·ª©c to√°n h·ªçc ƒë∆°n gi·∫£n v√† b·ªçc l·∫°i th√†nh LaTeX ($$ ... $$)
    """
    pattern = r"([A-Za-z0-9\s\+\-\*/=^_‚àö‚àë‚à´]+)"
    results = re.findall(pattern, text)

    converted = text
    for expr in results:
        if any(op in expr for op in ["=", "+", "-", "*", "/", "^", "_", "‚àö", "‚àë", "‚à´"]):
            converted = converted.replace(expr, f"$$ {expr.strip()} $$")

    return converted

def save_text(file_path: Path, content: str):
    """L∆∞u text ra file .txt c√πng th∆∞ m·ª•c"""
    txt_path = file_path.with_suffix(".txt")
    with open(txt_path, "w", encoding="utf-8") as f:
        f.write(content)
    print(f"üíæ ƒê√£ l∆∞u: {txt_path}")

class PDFImageScanner:
    def __init__(self, ocr_only=False):
        self.ocr_only = ocr_only
        self.memory_monitor = MemoryMonitor()

    def extract_from_pdf(self, pdf_path: Path):
        """X·ª≠ l√Ω file PDF"""
        print(f"\nüìÑ ƒêang x·ª≠ l√Ω PDF: {pdf_path.name}")
        start_time = time.time()
        text_content = ""

        try:
            # 1. Th·ª≠ ƒë·ªçc text layer
            if not self.ocr_only:
                reader = PdfReader(str(pdf_path))
                for page in reader.pages:
                    text_content += page.extract_text() or ""

            # 2. N·∫øu kh√¥ng c√≥ text ‚Üí OCR
            if not text_content.strip():
                print("üîé Kh√¥ng c√≥ text layer ‚Üí OCR t·ª´ng trang...")
                images = convert_from_path(str(pdf_path), poppler_path=POPPLER_PATH)

                for i, img in enumerate(tqdm(images, desc="OCR", unit="page")):
                    raw_text = pytesseract.image_to_string(img, lang="eng+vie")
                    processed_text = detect_math_expressions(raw_text)
                    text_content += f"\n\n--- Page {i+1} ---\n{processed_text}"

            # 3. L∆∞u file txt
            save_text(pdf_path, text_content)

            elapsed = time.time() - start_time
            print(f"‚úÖ Ho√†n th√†nh PDF: {pdf_path.name} ({elapsed:.2f}s)")
            self.memory_monitor.check()

        except Exception as e:
            print(f"‚ùå L·ªói khi x·ª≠ l√Ω {pdf_path.name}: {e}")

        finally:
            gc.collect()

    def extract_from_image(self, img_path: Path):
        """X·ª≠ l√Ω file ·∫£nh (JPG, PNG, HEIC, ...)"""
        print(f"\nüñºÔ∏è ƒêang x·ª≠ l√Ω ·∫£nh: {img_path.name}")
        start_time = time.time()

        try:
            img = Image.open(img_path).convert("RGB")  # HEIC s·∫Ω load ƒë∆∞·ª£c nh·ªù pillow-heif
            raw_text = pytesseract.image_to_string(img, lang="eng+vie")
            processed_text = detect_math_expressions(raw_text)

            save_text(img_path, processed_text)

            elapsed = time.time() - start_time
            print(f"‚úÖ Ho√†n th√†nh ·∫£nh: {img_path.name} ({elapsed:.2f}s)")
            self.memory_monitor.check()

        except Exception as e:
            print(f"‚ùå L·ªói khi x·ª≠ l√Ω {img_path.name}: {e}")

        finally:
            gc.collect()

    def scan_folder(self, folder_path: str):
        """Qu√©t to√†n b·ªô th∆∞ m·ª•c v√† th∆∞ m·ª•c con"""
        folder = Path(folder_path.strip().strip("'\""))
        if not folder.is_dir():
            print(f"‚ùå Th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i: {folder}")
            return

        files = [f for f in folder.rglob("*") if f.suffix.lower() in [".pdf"] + SUPPORTED_IMG_EXTS]

        if not files:
            print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file PDF ho·∫∑c ·∫£nh n√†o")
            return

        print(f"üìÇ T√¨m th·∫•y {len(files)} file trong {folder}")
        for i, f in enumerate(files, 1):
            print(f"\nüìä Ti·∫øn tr√¨nh: {i}/{len(files)} ({(i/len(files))*100:.1f}%)")
            if f.suffix.lower() == ".pdf":
                self.extract_from_pdf(f)
            else:
                self.extract_from_image(f)

def main():
    print("=== üìö PDF/Image Scanner with OCR + Math to LaTeX (MacBook Pro M2, HEIC supported) ===")
    folder = input("üëâ Nh·∫≠p ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c g·ªëc: ").strip()

    if not folder:
        print("‚ùå B·∫°n ch∆∞a nh·∫≠p th∆∞ m·ª•c")
        sys.exit(1)

    scanner = PDFImageScanner(ocr_only=False)
    start = time.time()
    scanner.scan_folder(folder)
    total = time.time() - start

    print("\nüéâ Ho√†n t·∫•t qu√©t!")
    print(f"‚è±Ô∏è T·ªïng th·ªùi gian: {total:.2f}s")

if __name__ == "__main__":
    main()
